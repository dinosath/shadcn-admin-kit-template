{%- import "macros.jinja" as macros -%}

{%- macro get_input_type(name, property, required=false) -%}
{%- filter trim -%}
{%- set map = [
        {"type": "string", "format": "uuid", "result": "TextInput"},
        {"type": "string", "format": "date-time", "result": "DateTimeInput"},
        {"type": "string", "format": "date", "result": "DateInput"},
        {"type": "string", "format": "time", "result": "DateInput"},
        {"type": "string", "result": "TextInput"},
        {"type": "string", "enum": property.enum, "result": "SelectInput"},
        {"type": "number", "enum": property.enum, "result": "SelectInput"},
        {"type": "integer", "enum": property.enum, "result": "SelectInput"},
        {"type": "boolean", "result": "BooleanInput"},
        {"type": "integer", "min": 0, "max": 255, "result": "NumberInput"},
        {"type": "integer", "min": 0, "max": 65535, "result": "NumberInput"},
        {"type": "integer", "min": 0, "max": 4294967295, "result": "NumberInput"},
        {"type": "integer", "min": 0, "max": None, "result": "NumberInput"},
        {"type": "integer", "min": None, "max": 127, "result": "NumberInput"},
        {"type": "integer", "min": None, "max": 32767, "result": "NumberInput"},
        {"type": "integer", "min": None, "max": 2147483647, "result": "NumberInput"},
        {"type": "integer", "min": None, "max": None, "result": "NumberInput"},
        {"type": "number", "min": -3.40282347, "max": 3.40282347, "result": "NumberInput"},
        {"type": "number", "min": None, "max": None, "result": "NumberInput"},
        {"type": "object", "x-relationship": "many-to-one", "result": "ReferenceInput"},
        {"type": "array", "x-relationship": "one-to-many", "result": "ReferenceArrayInput"},
        {"type": "array","x-relationship": "many-to-many", "result": "ReferenceArrayInput"}
] -%}
{%- set type = map
    | selectattr('type', 'equalto', property.type)
    | selectattr('format', 'equalto', property.format)
    | selectattr('min', 'equalto', property.min)
    | selectattr('enum', 'equalto', property.enum)
    | selectattr('max', 'equalto', property.max)
    | selectattr('x-relationship', 'equalto', property['x-relationship'])
    | map(attribute='result')
    | first
    | default('TextInput')
-%}
{{ type }}
{%- endfilter -%}
{%- endmacro -%}

{%- macro get_choices(object) -%}
{%- filter trim -%}
{%- if 'enum' in object -%}
choices={[
{%- for enum in object.enum -%}{ id: '{{ enum }}', name: '{{ enum }}' }{{ ',' if not loop.last }}{%- endfor -%}]}
{% endif -%}
{%- endfilter -%}
{%- endmacro -%}

{#- Macro to get the input element for a property -#}
{%- macro get_input_element(name, property) -%}
{%- filter trim -%}
<{{ get_input_type(name, property, name in property.required) }} {{ 'readOnly' if 'readOnly' in property }} source="{{ name | camel_case }}"
{%- set is_relation = macros.relation_is_many_to_many(property)=='true' or macros.relation_is_many_to_one(property=property)=='true' -%}
{%- if is_relation -%}
{%- set relation = macros.get_relation(property) -%}
{{' '}}reference="{{ relation | plural | kebab_case }}" label="{{ relation | pascal_case }}" defaultValue={[]} {{- ' validate={[required()]}' if 'required' in entity and name in entity.required  }}/>
{% else -%}
{{- ' validate={[required()]}' if 'required' in entity and name in entity.required  }} {{ get_choices(entity) }} {{ get_choices(property) }}/>
{% endif -%}
{%- endfilter -%}
{%- endmacro -%}

{%- macro get_field(property) -%}
{% filter trim %}
    {% if property.type and property.type == "string" -%}
        {% if property.format and property.format == "uuid" -%}
            TextField
        {% elif property.format and property.format == "date-time" -%}
            DateField
        {% elif property.format and property.format == "date" -%}
            DateField
        {% elif property.format and property.format == "time" -%}
            TextField
        {% elif property.format and (property.format == "uri" or property.format == "url") -%}
            UrlField
        {% else -%}
            TextField
        {% endif -%}
    {% elif property.type and property.type == "boolean" -%}
            TextField
    {% elif property.type and property.type == "integer" -%}
            NumberField
    {% elif property.type and property.type == "number" -%}
            NumberField
    {% elif property.enum %}
            TextField
    {% elif macros.relation_is_one_to_many(property)=='true' or macros.relation_is_many_to_many(property)=='true' -%}
        {% set relation = macros.get_relation(property) | plural | snake_case -%}
            TextField
    {% elif macros.relation_is_many_to_one(property)=='true' -%}
        {% set relation = macros.get_relation(property) -%}
            ReferenceField reference="{{ relation | plural | kebab_case }}" label="{{ relation | pascal_case }}"
    {% elif macros.relation_is_many_to_many(property)=='true' -%}
        {% set relation = macros.get_relation(property) -%}
        ReferenceArrayField reference="{{ relation | plural | kebab_case }}" label="{{ relation | pascal_case }}"
    {% else -%}
            TextField
    {% endif -%}
{% endfilter %}
{%- endmacro -%}

{%- macro is_read_only(property) -%}
{% if property and property.readOnly -%}
readOnly
{% endif -%}
{%- endmacro -%}

{%- macro get_input_field(property) -%}
{% filter trim %}
    {% if type in property and property.type == "string" -%}
        {% if property.format and property.format == "uuid" -%}
            TextInput
        {% elif property.format and property.format == "date-time" -%}
            DateTimeInput
        {% elif property.format and property.format == "date" -%}
            DateInput
        {% elif property.format and property.format == "time" -%}
            TextInput
        {% else -%}
            TextInput
        {% endif -%}
    {% elif type in property and property.type == "boolean" -%}
        BooleanInput
    {% elif type in property and property.type == "integer" -%}
        NumberInput
    {% elif type in property and property.type == "number" -%}
        NumberInput
    {% elif enum in property %}
        SelectField choices={[
            {%- for enum in property.enum -%}
               { name: '{{ enum }}' }{{ ',' if not loop.last }}
            {%- endfor -%}
            ]}
    {% elif macros.relation_is_many_to_one(property)=='true' -%}
        ReferenceInput
    {% elif macros.relation_is_many_to_many(property)=='true' -%}
        ReferenceArrayInput
    {% else -%}
        TextInput
    {% endif -%}
{% endfilter %}
{%- endmacro -%}

{%- macro get_reference(property) -%}
{% filter trim %}
    {% if macros.is_relation(property) == 'true'-%}
    reference="{{ macros.get_relation(property) | plural | snake_case }}"
    {% endif -%}
{% endfilter %}
{%- endmacro -%}


{%- macro get_all_properties_by_name(entity) -%}
{%- set properties = [] -%}
{% for name,property in entity.properties | items -%}
    {% if macros.relation_is_one_to_many(property)=='true' or macros.relation_is_many_to_many(property)=='true'  -%}
    {% continue -%}
    {% endif -%}
    {% if macros.relation_is_many_to_one(property)=='true'  -%}
    {% set relation = macros.get_relation(property) | camel_case | trim -%}
    {% set name = relation ~ " { id }" -%}
    {% endif -%}
    {%- set properties = properties | concat(name) -%}
{% endfor -%}
{{ properties | join(" ") }}
{%- endmacro -%}

{% macro get_all_properties_by_name(entity) %}
    {% set properties = [] %}
    {% for name, property in entity.properties | items %}
        {% if macros.relation_is_one_to_many(property)=='true' or macros.relation_is_many_to_many(property)=='true' %}
            {% continue %}
        {% endif %}
        {% if macros.relation_is_many_to_one(property)=='true' %}
            {% set relation = get_relation(property) | camel_case | trim %}
            {% set name = relation ~ " { id }" %}
        {% endif %}
        {% set properties = properties + [name] %}
    {% endfor %}
    {{ properties | join(' ') }}
{% endmacro %}


{%- macro source(name,property) -%}
{% filter trim %}
{{name|camel_case}}
{%- if macros.relation_is_many_to_one(property)=='true' -%}
.id
{%- endif -%}
{%- endfilter -%}
{%- endmacro -%}

{%- macro validation(entity,name,property) -%}
{%- filter trim -%}
    {%- if 'required' in entity and 'name' in entity.required  -%}
        validate={[required()]}
    {%- endif -%}
{%- endfilter -%}
{%- endmacro -%}